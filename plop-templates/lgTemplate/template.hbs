{{#if template}}
<template lang="pug">
  .lg-container
    .lg-container-white
      .filter-container
        el-input.filter-item.w200(v-model="filters.keyWord" placeholder="输入关键字过滤" @keyup.enter.native="handleFilter")
        el-button.filter-item(type="primary" icon="el-icon-search" @click="handleFilter") 搜索
        el-button.filter-item(type="primary" icon="el-icon-plus" @click="handleCreate") 新增
      lgTable(columns-type="index"
        columns-label="序号"
        :list="list"
        :total-list="total"
        :lg-thead="{{ api }}Const.tableAttr.thead"
        :lg-buttons="{{ api }}Const.tableAttr.buttons"
        @operationEvent0="operationEvent0"
        @operationEvent1="operationEvent1"
        @operationEvent2="operationEvent2"
        @initListQuery="initListQuery"
        @getListByPagination="getListByPagination")
      lgDialog(:title="dialogTitle"
        :visible="dialogFormVisible"
        width="500px"
        :show-form="true"
        form-ref="dataForm"
        :form-rules="dataRules"
        label-width="70px"
        :value="dataForm"
        @on-submit="handleCreateOrUpdate"
        @on-close="onClose")
        template(slot="form")
          el-form-item(label="模板" prop="template")
            el-input(v-model="dataForm.template")
</template>
{{/if}}

{{#if script}}
<script>
import { list, createOrUpdate } from '@/api/common'
import lgTable from '@/views/components/lgTable'
import lgDialog from '@/views/components/lgDialog'
import { constants } from '@/views/{{ file }}/columnsConst'
const { {{ api }}Const } = constants
const defaultForm = {
  id: null,
  template: '',
  status: 1
}
export default {
  name: '{{ properCase name }}',
  components: { lgTable, lgDialog },
  data() {
    return {
      {{ api }}Const,
      apiUri: '{{ api }}',
      list: [],
      total: 0,
      listQuery: {
        current: 1,
        pageSize: 10
      },
      filters: {
        keyWord: ''
      },
      dataForm: Object.assign({}, defaultForm),
      dialogFormVisible: false,
      dialogTitle: '',
      dataRules: {}
    }
  },
  mounted() {
    this.getList()
  },
  methods: {
    // 初始化页数与条数
    initListQuery(listQuery) {
      this.listQuery = listQuery
    },
    // 分页操作
    getListByPagination(listQuery) {
      this.listQuery = listQuery
      this.getList()
    },
    // 过滤列表
    handleFilter() {
      this.listQuery.page = 1
      this.getList()
    },
    // 获取列表
    getList() {
      this.$store.dispatch('app/toggleLoading', true)
      const params = Object.assign({}, this.listQuery, this.filters)
      list(this.apiUri, params).then(res => {
        if (res.code === 200) {
          this.list = res.data.list
          this.total = res.data.total
        }
      })
    },
    // 编辑
    operationEvent0(row) {
      this.dataForm = Object.assign({}, row)
      this.dialogTitle = '更新'
      this.dialogFormVisible = true
    },
    // 启用
    operationEvent1(row) {
      const params = {
        id: row.id,
        status: 1
      }
      createOrUpdate(this.apiUri, params).then(res => {
        if (res.code === 200) {
          this.getList()
          this.$message({
            message: '启用成功',
            type: 'success'
          })
        }
      })
    },
    // 禁用
    operationEvent2(row) {
      const params = {
        id: row.id,
        status: 0
      }
      createOrUpdate(this.apiUri, params).then(res => {
        if (res.code === 200) {
          this.getList()
          this.$message({
            message: '禁用成功',
            type: 'success'
          })
        }
      })
    },
    // 添加
    handleCreate() {
      this.resetForm()
      this.dialogTitle = '新增'
      this.dialogFormVisible = true
    },
    // 添加提交
    handleCreateOrUpdate() {
      const data = Object.assign({}, this.dataForm)
      createOrUpdate(this.apiUri, data).then(res => {
        if (res.code === 200) {
          this.getList()
          this.dialogFormVisible = false
          this.$message({
            message: this.dialogTitle + '成功',
            type: 'success'
          })
        }
      })
    },
    onClose() {
      this.dialogFormVisible = false
    },
    // 清空弹框表单
    resetForm() {
      this.dataForm = Object.assign({}, defaultForm)
    }
  }
}
</script>
{{/if}}

{{#if style}}
<style lang="scss" scoped>

</style>
{{/if}}
